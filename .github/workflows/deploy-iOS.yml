name: Upload to TestFlight

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'  # Fetches all submodules recursively

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.A_CERT }}
          DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROFILE_BASE64: ${{ secrets.A_PROF}}
          DISTRIBUTION_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate to keychain
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > build_certificate.p12
          security import build_certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Import certificate to keychain
          echo $DISTRIBUTION_CERTIFICATE_BASE64 | base64 --decode > distribution_certificate.p12
          security import distribution_certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$BUILD_PROFILE_BASE64" | base64 --decode > build_profile.mobileprovision
          UUID=$(security cms -D -i build_profile.mobileprovision | plutil -extract UUID raw -)
          cp build_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          echo "$DISTRIBUTION_PROFILE_BASE64" | base64 --decode > distribution_profile.mobileprovision
          UUID=$(security cms -D -i distribution_profile.mobileprovision | plutil -extract UUID raw -)
          cp distribution_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/mobileprovision

      - name: Debug Profile
        run: |
          security cms -D -i build_profile.mobileprovision | plutil -extract UUID raw -
          security cms -D -i build_profile.mobileprovision | plutil -extract Name raw -
          security cms -D -i build_profile.mobileprovision | plutil -extract TeamIdentifier raw -
          security cms -D -i build_profile.mobileprovision | plutil -extract Entitlements.application-identifier raw -
          
                    security cms -D -i distribution_profile.mobileprovision | plutil -extract UUID raw -
          security cms -D -i distribution_profile.mobileprovision | plutil -extract Name raw -
          security cms -D -i distribution_profile.mobileprovision | plutil -extract TeamIdentifier raw -
          security cms -D -i distribution_profile.mobileprovision | plutil -extract Entitlements.application-identifier raw -

      - name: Debug Provisioning Profiles
        run: |
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          security find-identity -v -p codesigning build.keychain

      - name: Build shared framework
        run: |
          ./gradlew linkReleaseFrameworkIosArm64

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup Apple Developer Account
        env:
          APPLE_DEVELOPER_USERNAME: ${{ secrets.APPLE_DEVELOPER_USERNAME }}
          APPLE_DEVELOPER_PASSWORD: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          xcrun notarytool store-credentials "AC_PASSWORD" \
            --apple-id "$APPLE_DEVELOPER_USERNAME" \
            --team-id "$TEAM_ID" \
            --password "$APPLE_DEVELOPER_PASSWORD"
          
          # Create directory for provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles


      - name: Build iOS archive
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo ${TEAM_ID}
          xcodebuild -project iosApp/iosApp.xcodeproj \
            -scheme iosApp \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $PWD/build/iosApp.xcarchive \
            -allowProvisioningUpdates \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="IOS_DISTRIBUTION_PROFILE" \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
            clean archive

      - name: Debug App Bundle
        run: |
          plutil -p "$PWD/build/iosApp.xcarchive/Products/Applications/ProjectX.app/Info.plist"

      - name: Check Archive Signing
        run: |
          codesign -dvv $PWD/build/iosApp.xcarchive/Products/Applications/ProjectX.app

      - name: Debug Export Options
        run: |
          ls -la iosApp/exportOptions.plist
          cat iosApp/exportOptions.plist

      - name: Export IPA
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          xcodebuild -exportArchive \
            -archivePath $PWD/build/iosApp.xcarchive \
            -exportOptionsPlist iosApp/exportOptions.plist \
            -exportPath $PWD/build \
            -allowProvisioningUpdates \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="IOS_DISTRIBUTION_PROFILE_2" \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
            -verbose

      - name: List Build Directory
        run: |
          ls -la build/

      - uses: apple-actions/upload-testflight-build@v3
        with:
          app-path: "build/ProjectX.ipa"
          app-type: ios
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
